{"version":3,"sources":["components/MultiSearch/MultipleSelect.js","components/Results/Recipe.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","display","flexWrap","width","fontSize","palette","primary","secondary","MenuProps","PaperProps","style","maxHeight","ITEM_HEIGHT","names","getStyles","item","ingredients","fontWeight","indexOf","typography","fontWeightRegular","fontWeightMedium","MultipleSelect","_ref","getSelect","useTheme","_React$useState","React","useState","_React$useState2","Object","slicedToArray","setIngredients","react_default","a","createElement","className","FormControl","id","InputLabel","htmlFor","Select","multiple","value","onChange","e","target","input","Input","map","MenuItem","key","onClick","Recipe","title","image","link","src","alt","href","App","_useState","_useState2","recipes","setRecipes","_useState3","_useState4","search","setSearch","_useState5","_useState6","query","setQuery","useEffect","chooseIngredients","asyncToGenerator","regenerator_default","mark","_callee","response","data","wrap","_context","prev","next","fetch","concat","sent","json","results","stop","apply","this","arguments","onSubmit","preventDefault","type","MultiSearch_MultipleSelect","recipe","components_Results_Recipe","thumbnail","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.66dbb6c5.chunk.js","sourcesContent":["import React from 'react';\nimport './MultipleSelect.css'\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    width: '70%',\n    fontSize: '120px'\n  },\n  palette: {\n    primary: '#fb9e06',\n    secondary: '#fb9e06',\n  },\n}));\n\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = {\n  PaperProps: {\n    style: {\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n      width: 250,\n    },\n  },\n};\n\nconst names = [\n  'eggs',\n  'potatoes',\n  'tomatoes',\n  'pasta',\n  'rice',\n  'chicken',\n  'mushrooms',\n  'corn',\n  'zucchini',\n  'sour cream',\n  'cucumbers',\n  'broccoli',\n  'butter',\n  'lemon',\n  'bananas',\n  'onion',\n  'sugar',\n  'apple'\n];\n\nfunction getStyles(item, ingredients, theme) {\n  return {\n    fontWeight:\n      ingredients.indexOf(item) === -1\n        ? theme.typography.fontWeightRegular\n        : theme.typography.fontWeightMedium,\n  };\n}\n\nfunction MultipleSelect({ getSelect }) {\n  const classes = useStyles();\n  const theme = useTheme();\n  const [ingredients, setIngredients] = React.useState([]);\n\n  function handleChange(e) {\n    setIngredients(e.target.value);\n  }\n\n  return (\n    <div className=\"multiSearch\">\n      <FormControl className=\"multiSearch__form\" id=\"multiForm\">\n        <InputLabel htmlFor=\"select-multiple\">Choose from the list</InputLabel>\n        <Select\n          multiple\n          value={ingredients}\n          onChange={handleChange}\n          input={<Input id=\"select-multiple\" />}\n          MenuProps={MenuProps}         \n        >\n          {names.map(item => (\n            <MenuItem key={item} value={item} style={getStyles(item, ingredients, theme)}>\n              {item}\n            </MenuItem>\n          ))}\n        </Select>        \n      </FormControl>\n      <button className=\"search-button\" onClick={() => getSelect(ingredients)}>GO</button>  \n    </div>\n  )\n};\nexport default MultipleSelect;","import React from 'react'\nimport './Recipe.css'\n\nconst Recipe = ({title,ingredients,image,link}) => {    \n    return (\n        <div className=\"result-content\"> \n            {(image === '') \n            ? <img src='https://images.unsplash.com/photo-1503197553955-b4eafae3e08e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1295&q=80' alt=\"{title}\"/>\n            : <img src={image} alt=\"{title}\"/> \n            }                          \n            <div className=\"result-data\">\n                <h3>{title}</h3>\n                <p>{ingredients}</p>\n                <a href={link}>Go to recipe</a>\n            </div>            \n        </div>\n    )\n}  \n  \nexport default Recipe;","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport MultipleSelect from './components/MultiSearch/MultipleSelect'\nimport Recipe from './components/Results/Recipe'\n\nconst App = () => {\n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState('');\n  const [query, setQuery] = useState('');\n\nuseEffect(() => {\n  chooseIngredients();\n}, [query])\n\nconst chooseIngredients = async () => {\n  const response = await fetch(`https://cors-anywhere.herokuapp.com/http://www.recipepuppy.com/api/?i=${query}&p=10`);\n  const data = await response.json();\n  setRecipes(data.results);\n}\nconst updateSearch = e => {\n  setSearch(e.target.value)\n};\nconst getSearch = e => {\n  e.preventDefault();\n  setQuery(search)\n}\nconst getSelect = ingredients => {\n  setQuery(ingredients)\n}\n\nreturn (\n    <div className=\"App\">\n      <div className=\"header\">\n        <h1 className=\"header__title\">Recipes by <span>Ingredients</span></h1>\n        <h2>Find recipes based on ingredients that you have on hand</h2>\n        <div className=\"header__search\">\n          <form className=\"search-form\" onSubmit={getSearch}>\n            <input className=\"search-input\" type=\"text\" value={search} onChange={updateSearch}/>\n            <button className=\"search-button\">GO</button>\n          </form>\n        </div>\n      <MultipleSelect getSelect={getSelect}/>\n      </div>\n      <div className=\"result\">\n      {recipes.map(recipe => (\n        <Recipe \n          key={recipe.href}\n          image={recipe.thumbnail}\n          ingredients={recipe.ingredients}\n          title={recipe.title}\n          link={recipe.href}\n        />\n      ))}\n      </div>\n      <div className=\"footer\">\n        <h1>Enjoy your meal!</h1>\n      </div>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}